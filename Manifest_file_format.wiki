The manifest file describes files contained in a rocks tree or server. Each rocks tree or server has a "manifest" file in its root. Rocks servers may also have versioned manifests and compressed manifests. These must match the contents of the uncompressed manifest.

It contains at least three tables:

* "repository" (table) - contains a table where each key is a package name.
** string key (table) - each entry represents a rock, each key is a version number in "version-revision" string format.
*** string key (table) - each table represents an entry for a version-revision, contaning some of the fields below. For a .rock or .rockspec file in a rocks server, only the "arch" field is set. For installed rocks in a rocks tree, the "arch", "modules", "commands" and "dependencies" field are set (even if they are empty tables).
**** "arch" (string) - the architecture for the rock
**** "modules" (array of strings) - The list of modules provided by this rock
**** "commands" (array of strings) - The list of command-line scripts provided by this rock
**** "dependencies" (table with string values and string keys) - The table of dependencies of this rock, where each key is a rock name and each key is a version-revision string specifying which is the version in this repository that is currently satisfying the dependency.
* "modules" (table) - In a rocks tree, this contains all modules available in the tree. In a rocks server, this table is empty (it may be in future releases).
** string key (array of strings) - each entry represents a module, the key is the module name in Lua format (for example, "foo.bar"); the value is an array of strings of rocks providing this module, in "module/version-rev" format (example: "foo/1.0-1")
* "commands" (table) - In a rocks tree, this contains all command-line scripts available in the tree. In a rocks server, this table is empty (it may be in future releases). The table is structured like the "modules" table above.

Manifests for rocks trees also contain a dependencies table:

* "dependencies" (table) - In a rocks tree, this contains precomputed dependency information to be used by luarocks.loader. In a rocks server, this variable is currently not set (it may be in future releases).
** string key (table) - Each string key is a rock name.
*** string key (array of tables) - Each string key is a version-revision string and the value is an array of tables, each of them containing two entries:
**** "name" (string) - The name of the rock depended on
**** "constraints" (array of table) - A table of version constraints, pre-parsed as:
***** "op" (string) - An operator
***** "version" (table) - A table with a numeric representation of the version in the array part, and a "string" field containing a string representation of the version number constraint as it appears in the rockspec.